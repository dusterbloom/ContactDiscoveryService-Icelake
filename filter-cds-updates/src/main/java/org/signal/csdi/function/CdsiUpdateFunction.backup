package org.signal.cdsi.account.azure.function;

import com.azure.core.util.BinaryData;
import com.microsoft.azure.functions.*;
import com.microsoft.azure.functions.annotation.*;
import org.signal.cdsi.account.AccountUpdateValidator;
import org.signal.cdsi.enclave.DirectoryEntry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.ArrayList;
import java.util.List;

public class CdsiUpdateFunction {
    private static final Logger logger = LoggerFactory.getLogger(CdsiUpdateFunction.class);
    
    private final AccountUpdateHandler updateHandler;

    public CdsiUpdateFunction() {
        this.updateHandler = new AccountUpdateHandler(new AccountUpdateValidator());
    }

    @FunctionName("ProcessCdsiUpdates")
    @EventHubOutput(
        name = "eventHubOutput",
        eventHubName = "%EventHubName%",
        connection = "EventHubConnection"
    )
    public List<BinaryData> processUpdates(
            @EventHubTrigger(
                name = "eventHubTrigger",
                eventHubName = "%EventHubName%",
                cardinality = Cardinality.MANY,
                connection = "EventHubConnection"
            ) List<BinaryData> events,
            final ExecutionContext context) {

        List<BinaryData> validUpdates = new ArrayList<>();
        
        for (BinaryData event : events) {
            try {
                DirectoryEntry entry = DirectoryEntry.parseFrom(event.toBytes());
                updateHandler.handleUpdate(entry)
                    .ifPresent(validEntry -> validUpdates.add(BinaryData.fromObject(validEntry)));
            } catch (Exception e) {
                logger.error("Error processing update event", e);
            }
        }

        return validUpdates;
    }
}